{
  "_args": [
    [
      {
        "raw": "avro-js@*",
        "scope": null,
        "escapedName": "avro-js",
        "name": "avro-js",
        "rawSpec": "*",
        "spec": "*",
        "type": "range"
      },
      "/Users/emili/stuart/avro/js"
    ]
  ],
  "_from": "avro-js@*",
  "_id": "avro-js@1.8.2",
  "_inCache": true,
  "_location": "/avro-js",
  "_nodeVersion": "0.12.4",
  "_npmOperationalInternal": {
    "host": "s3://npm-registry-packages",
    "tmp": "tmp/avro-js-1.8.2.tgz_1495296291972_0.21891017979942262"
  },
  "_npmUser": {
    "name": "sacharya",
    "email": "suraj.spa@gmail.com"
  },
  "_npmVersion": "2.10.1",
  "_phantomChildren": {},
  "_requested": {
    "raw": "avro-js@*",
    "scope": null,
    "escapedName": "avro-js",
    "name": "avro-js",
    "rawSpec": "*",
    "spec": "*",
    "type": "range"
  },
  "_requiredBy": [
    "/"
  ],
  "_resolved": "https://registry.npmjs.org/avro-js/-/avro-js-1.8.2.tgz",
  "_shasum": "915d1cf4497261e76496147f3e6b9c4a6f678329",
  "_shrinkwrap": null,
  "_spec": "avro-js@*",
  "_where": "/Users/emili/stuart/avro/js",
  "author": {
    "name": "Avro Developers",
    "email": "dev@avro.apache.org"
  },
  "browser": {
    "./lib": "./etc/browser/avro.js",
    "crypto": "./etc/browser/crypto.js"
  },
  "contributors": [
    {
      "name": "Matthieu Monsch",
      "email": "monsch@alum.mit.edu"
    },
    {
      "name": "Quinn Slack",
      "email": "sqs@cs.stanford.edu"
    }
  ],
  "dependencies": {
    "underscore": "*"
  },
  "description": "JavaScript Avro implementation",
  "devDependencies": {
    "coveralls": "^2.11.4",
    "istanbul": "^0.3.19",
    "mocha": "^2.3.2",
    "tmp": "^0.0.28"
  },
  "directories": {},
  "dist": {
    "shasum": "915d1cf4497261e76496147f3e6b9c4a6f678329",
    "tarball": "https://registry.npmjs.org/avro-js/-/avro-js-1.8.2.tgz"
  },
  "engine": {
    "node": ">=0.11"
  },
  "files": [
    "LICENSE",
    "NOTICE",
    "lib",
    "etc/browser",
    "etc/deprecated/validator.js"
  ],
  "keywords": [
    "avro",
    "json"
  ],
  "license": "Apache-2.0",
  "main": "./lib",
  "maintainers": [
    {
      "name": "mtth",
      "email": "monsch@alum.mit.edu"
    },
    {
      "name": "rdblue",
      "email": "rdblue@gmail.com"
    },
    {
      "name": "sacharya",
      "email": "suraj.spa@gmail.com"
    }
  ],
  "name": "avro-js",
  "noAnalyze": true,
  "optionalDependencies": {},
  "readme": "<!--\nLicensed to the Apache Software Foundation (ASF) under one\nor more contributor license agreements.  See the NOTICE file\ndistributed with this work for additional information\nregarding copyright ownership.  The ASF licenses this file\nto you under the Apache License, Version 2.0 (the\n\"License\"); you may not use this file except in compliance\nwith the License.  You may obtain a copy of the License at\n\nhttp://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n-->\n\n\n# Avro-js\n\nPure JavaScript implementation of the [Avro specification](https://avro.apache.org/docs/current/spec.html).\n\n\n## Features\n\n+ Fast! Typically twice as fast as JSON with much smaller encodings.\n+ Full Avro support, including recursive schemas, sort order, and evolution.\n+ Serialization of arbitrary JavaScript objects via logical types.\n+ Unopinionated 64-bit integer compatibility.\n+ No dependencies, `avro-js` even runs in the browser.\n\n\n## Installation\n\n```bash\n$ npm install avro-js\n```\n\n`avro-js` is compatible with all versions of [node.js][] since `0.11` and major\nbrowsers via [browserify][].\n\n\n## Documentation\n\nSee `doc/` folder.\n\n\n## Examples\n\nInside a node.js module, or using browserify:\n\n```javascript\nvar avro = require('avro-js');\n```\n\n+ Encode and decode objects:\n\n  ```javascript\n  // We can declare a schema inline:\n  var type = avro.parse({\n    name: 'Pet',\n    type: 'record',\n    fields: [\n      {name: 'kind', type: {name: 'Kind', type: 'enum', symbols: ['CAT', 'DOG']}},\n      {name: 'name', type: 'string'}\n    ]\n  });\n  var pet = {kind: 'CAT', name: 'Albert'};\n  var buf = type.toBuffer(pet); // Serialized object.\n  var obj = type.fromBuffer(buf); // {kind: 'CAT', name: 'Albert'}\n  ```\n\n+ Generate random instances of a schema:\n\n  ```javascript\n  // We can also parse a JSON-stringified schema:\n  var type = avro.parse('{\"type\": \"fixed\", \"name\": \"Id\", \"size\": 4}');\n  var id = type.random(); // E.g. Buffer([48, 152, 2, 123])\n  ```\n\n+ Check whether an object fits a given schema:\n\n  ```javascript\n  // Or we can specify a path to a schema file (not in the browser):\n  var type = avro.parse('./Person.avsc');\n  var person = {name: 'Bob', address: {city: 'Cambridge', zip: '02139'}};\n  var status = type.isValid(person); // Boolean status.\n  ```\n\n+ Get a [readable stream][readable-stream] of decoded records from an Avro\n  container file (not in the browser):\n\n  ```javascript\n  avro.createFileDecoder('./records.avro')\n    .on('metadata', function (type) { /* `type` is the writer's type. */ })\n    .on('data', function (record) { /* Do something with the record. */ });\n  ```\n\n\n[node.js]: https://nodejs.org/en/\n[readable-stream]: https://nodejs.org/api/stream.html#stream_class_stream_readable\n[browserify]: http://browserify.org/\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "svn",
    "url": "http://svn.apache.org/repos/asf/avro/trunk/lang/js/"
  },
  "scripts": {
    "clean": "rm -rf coverage node_modules",
    "cover": "istanbul cover _mocha",
    "test": "mocha"
  },
  "version": "1.8.2"
}
